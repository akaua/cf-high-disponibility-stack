Description: AWS Cloud high disponibility env stack.
Parameters:
  EnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation)
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation)
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation)
    Type: String
    Default: "10.0.1.0/24"
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation)
    Type: String
    Default: "10.0.2.0/24"
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation)
    Type: String
    Default: "10.0.3.0/24"
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-07d0cf3af28718ef8
    us-east-2:
      AMIID: ami-05c1fa8df71875112
    us-west-1:
      AMIID: ami-08fd8ae3806f09a08
    us-west-2:
      AMIID: ami-005bdb005fb00e791

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT Gateway 1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT Gateway 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  LoadBalacerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancer/Servers security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref UdagramSSHSecurityGroup
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Servers Security Group

  UdagramSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Udagrams Security Group that allows ssh access to private subnets
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SSH Security Group

  UdagramLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
          cp -f udacity/index.html index.html
      # ImageId: ami-005bdb005fb00e791
      ImageId: !FindInMap 
        - AWSRegionToAMI
        - !Ref 'AWS::Region'
        - AMIID
      IamInstanceProfile: !Ref ProfileWithRolesForUdagram
      SecurityGroups:
        - Ref: LoadBalacerSecurityGroup
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  UdagramAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Ref: "PrivateSubnet1"
        - Ref: "PrivateSubnet2"
      LaunchConfigurationName:
        Ref: UdagramLaunchConfig
      MinSize: "4"
      MaxSize: "10"
      TargetGroupARNs:
        - !Ref UdagramTargetGroup
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - PropagateAtLaunch: "true"
          Key: Name
          Value: !Sub ${EnvironmentName} Auto Scaling Group

  UdagramTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Target Group

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: LoadBalacerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Load Balancer

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref UdagramTargetGroup

  LoadBalancerListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    DependsOn: LoadBalancerListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref UdagramTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  UdagramSSHInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion
      ImageId: ami-005bdb005fb00e791
      InstanceType: t3.small
      SubnetId:
        Ref: PublicSubnet1
      AvailabilityZone: !Select [0, !GetAZs ""]
      SecurityGroupIds:
        - Ref: UdagramSSHSecurityGroup

  ProfileWithRolesForUdagram:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: UdacityS3ReadOnlyEC2
  ListBucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ListBucketsPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: "*"
      Roles:
        - Ref: UdacityS3ReadOnlyEC2
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID

  PublicSubet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub "${EnvironmentName}-Public-Subnet-1"

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub "${EnvironmentName}-Public-Subnet-2"

  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1CIDR
    Export:
      Name: !Sub "${EnvironmentName}-Private-Subnet-1"

  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2CIDR
    Export:
      Name: !Sub "${EnvironmentName}-Private-Subnet-2"

  InternetGateway:
    Description: Internet Gateway
    Value: !Ref InternetGateway
    Export:
      Name: !Sub "${EnvironmentName}-Internet-Gateway"

  LoadBalancerDNS:
    Description: LoadBalancer DNS
    Value: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName]]
    Export:
      Name: !Sub "${EnvironmentName}-Load-Balacer-DNS"

  UdagramSSHInstancePUBLICIP:
    Description: UdagramSSHInstance Public IP
    Value: !GetAtt UdagramSSHInstance.PublicIp
    Export:
      Name: !Sub "${EnvironmentName}-UdagramSSHInstance-Public-Ip"

  UdagramSSHInstanceDNS:
    Description: UdagramSSHInstance DNS
    Value: !GetAtt UdagramSSHInstance.PublicDnsName
    Export:
      Name: !Sub "${EnvironmentName}-UdagramSSHInstance-Public-Dns"
